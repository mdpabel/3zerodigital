generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services Service[]

  @@map("categories")
}

model Service {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  description    String?
  shortDesc      String?
  price          Decimal   @db.Decimal(10, 2)
  originalPrice  Decimal?  @db.Decimal(10, 2)
  features       Json? // Array of features
  isActive       Boolean   @default(true)
  isPopular      Boolean   @default(false)
  isUrgent       Boolean   @default(false)
  responseTime   String?
  completionTime String?
  icon           String? // Icon name or URL
  color          String? // Color scheme
  bgGradient     String? // Background gradient
  guarantees     Json? // Array of guarantees
  bestFor        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? // Soft delete

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Related services (many-to-many self-relation)
  relatedTo   Service[] @relation("ServiceRelations")
  relatedFrom Service[] @relation("ServiceRelations")

  orderItems OrderItem[]

  @@map("services")
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  totalAmount   Decimal       @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  customerEmail String
  customerName  String?
  customerPhone String?
  notes         String?
  deliveryEmail String?
  deliveryPhone String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  orderItems OrderItem[]
  Template   Template?   @relation(fields: [templateId], references: [id])
  templateId String?

  @@map("orders")
}

model OrderItem {
  id             String   @id @default(cuid())
  quantity       Int      @default(1)
  price          Decimal  @db.Decimal(10, 2)
  customAmount   Decimal? @db.Decimal(10, 2) // For services with variable pricing
  specifications Json? // Custom requirements, notes, etc.

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Booking {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String?
  service   String?
  message   String?
  date      DateTime
  timeSlot  String
  duration  Int           @default(30) // minutes
  status    BookingStatus @default(PENDING)
  timezone  String        @default("UTC")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Template {
  id          String                       @id @default(cuid())
  name        String                       @unique
  slug        String
  fileUrl     String
  liveUrl     String
  description String?
  price       Float
  salePrice   Float
  images      String[]
  deleted     Boolean                      @default(false)
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  Order       Order[]
  categories  TemplateCategoryOnTemplate[]
}

model TemplateCategory {
  id        String                       @id @default(cuid())
  name      String                       @unique
  slug      String?
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
  templates TemplateCategoryOnTemplate[]
}

model TemplateCategoryOnTemplate {
  id         String           @id @default(cuid())
  templateId String
  categoryId String
  createdAt  DateTime         @default(now())
  updatedBy  String? // Additional metadata field
  template   Template         @relation(fields: [templateId], references: [id])
  category   TemplateCategory @relation(fields: [categoryId], references: [id])
}
